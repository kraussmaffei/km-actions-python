name: Run quality tasks for python projects
on:
  workflow_call:
    inputs:
      python-version:
        description: "The python version to use for executing the quality tasks."
        required: false
        type: string
        default: "3.8"
      python-package-path:
        description: "Path of the python package under quality test."
        required: true
        type: string
      unit-test-file-pattern:
        description: "The pattern to search for unit test files."
        required: false
        type: string
        default: "'test*.py'"
      aws-account-id:
        description: "The aws account id used for login."
        type: string
        required: false
        default: "304998364617"
      aws-region:
        description: "AWS region of the codeartifact domain."
        type: string
        required: false
        default: "eu-central-1"
      codeartifact-domain:
        description: "Domain of the aws codeartifact repository."
        type: string
        required: false
        default: "kraussmaffei"
      codeartifact-repository:
        description: "The aws codeartifact repository."
        type: string
        required: false
        default: "dss"
      additional-script-path:
        description: "File path to the script which shall be additionally executed."
        type: string
        required: false
        default: ""
      use-tox:
        description: "Use tox to run quality tasks"
        required: false
        type: string
        default: false

    secrets:
      aws-access-key-id:
        description: "The aws access key id used for login."
        required: true
      aws-secret-access-key:
        description: "The aws secret access key used for login."
        required: true
      role-external-id:
        description: "The external ID of the role to assume."
        required: true
      ci-token:
        description: "The ci token to use."
        required: false
      sonar-token:
        description: "The token to use for sonarcloud."
        required: false

jobs:
  format:
    name: "Check Black Formatting"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - uses: psf/black@stable

  test:
    name: "Test Python Package"
    runs-on: ubuntu-20.04
    needs: [format]
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3

      - name: "Setup Python"
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}

      - name: "Run additional script"
        if: ${{ inputs.additional-script-path != '' }}
        shell: bash
        run: |
          chmod +x ${{ inputs.additional-script-path }}
          ${{ inputs.additional-script-path }}

      - name: "Configure AWS Credentials"
        uses: kraussmaffei/actions/configure-aws-credentials@main
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          role-to-assume: arn:aws:iam::${{ inputs.aws-account-id }}:role/PythonPackageIndexCodeartifactReadWrite
          role-external-id: ${{ secrets.role-external-id }}
          role-skip-session-tagging: true
          mask-aws-account-id: false
          aws-region: ${{ inputs.aws-region }}

      - name: "CodeArtifact login (pip)"
        uses: kraussmaffei/aws-tools-login@main
        with:
          account: ${{ inputs.aws-account-id }}
          region: ${{ inputs.aws-region }}
          aws-tool: "codeartifact-pip"
          codeartifact-domain: ${{ inputs.codeartifact-domain }}
          codeartifact-repository: ${{ inputs.codeartifact-repository }}

      - name: Running flake8 linter...
        shell: bash
        run: |
          pip install flake8

          # stop the build if there are Python syntax errors or undefined names
          flake8 ./${{ inputs.python-package-path }} --count --select=E9,F63,F7,F82 --builtins="_" --show-source --statistics

          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 ./${{ inputs.python-package-path }} --count --exit-zero --max-complexity=10 --builtins="_" --max-line-length=127 --statistics

      - name: Running coverage calculation...
        shell: bash
        env:
          PYTHON_PACKAGE_PATH: ${{ inputs.python-package-path }}
          UNIT_TEST_FILE_PATTERN: ${{ inputs.unit-test-file-pattern }}
          COVERAGE_REPORT_OUTPUT: "./coverage-reports/coverage.xml"
        run: |
          pip install coverage
          if [[ "${{ inputs.use-tox }}" == "true" ]]; then
              echo "Using tox for running unit tests..."
              pip install tox
              tox
          else
              echo "Using github runner for running unit tests..."
              pip install .[test-dependencies]
              coverage run --source=${{ env.PYTHON_PACKAGE_PATH }} -m unittest discover -s tests -p ${{ env.UNIT_TEST_FILE_PATTERN }}
          fi
          coverage xml -o ${{ env.COVERAGE_REPORT_OUTPUT }}

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v1.6
        env:
          GITHUB_TOKEN: ${{ secrets.ci-token || github.token }}
          SONAR_TOKEN: ${{ secrets.sonar-token }}
